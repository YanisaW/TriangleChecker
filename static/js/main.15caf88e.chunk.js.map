{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","props","handleChangeComplete","color","setState","background","hex","state","side_1","side_2","side_3","result","handleChange","bind","handleClick","e","this","target","name","value","event","a","eval","b","c","preventDefault","className","style","fontSize","onSubmit","handleSubmit","type","onChange","onClick","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15caf88e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import { SketchPicker } from 'react-color';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      side_1: 0,\n      side_2: 0,\n      side_3: 0,\n      result: \"\",\n     \n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(e){\n    this.setState( { [e.target.name] : e.target.value} )\n  }\n\n  handleChangeComplete = (color) => {\n    this.setState({ background: color.hex });\n  };\n\n  \n  handleClick(event) {\n    var a = eval(this.state.side_1 * this.state.side_1)\n    var b = eval(this.state.side_2 * this.state.side_2)\n    var c = eval(this.state.side_3 * this.state.side_3)\n  \n    if((eval((this.state.side_1*1) + (this.state.side_2*1)) < (this.state.side_3*1))\n    || (eval((this.state.side_2*1) + (this.state.side_3*1)) < (this.state.side_1*1))\n    || (eval((this.state.side_1*1) + (this.state.side_3*1)) < (this.state.side_2*1))){\n      this.setState({result: \"Not a Triangle\"})\n    }\n\n    else if((this.state.side_1 == this.state.side_2) && (this.state.side_2 == this.state.side_3)){\n        this.setState({result: \"Equilateral Triangle\"})\n    }\n   \n    else if(((this.state.side_1 == this.state.side_2) && (this.state.side_1 != this.state.side_3)) \n       || ((this.state.side_2 == this.state.side_3) && (this.state.side_2 != this.state.side_1))\n       || ((this.state.side_1 == this.state.side_3) && (this.state.side_1 != this.state.side_2))){\n         this.setState({result: \"Isosceles Triangle\"})\n   }\n   \n    else if((a == eval(b+c)) || (b == eval(a+c)) || (c == eval(a+b))){\n         this.setState({result: \"Right Triangle\"})\n    }\n  \n\n    else if((this.state.side_1 != this.state.side_2) && (this.state.side_2 != this.state.side_3) && (this.state.side_1 != this.state.side_3) ){\n      this.setState({result: \"Scalene Triangle\"})}\n    \n  \n    event.preventDefault();\n  }\n\n  \n  render() {\n    \n    return (\n      \n     \n\n      <div className=\"App\">\n        \n        <br></br> <br></br>\n        <h1>Three Angle</h1>\n        <text style= {{fontSize : 20}}>Enter the length of sides</text>\n        <form onSubmit={this.handleSubmit}>\n\n          <label>\n            <br></br>\n            <t>Side1   : </t> \n            <input \n            type =\"number\" \n            name = \"side_1\"\n            side_1 ={this.state.side_1}\n            onChange={this.handleChange} /> \n          </label>\n          \n          <br></br>\n\n          <label>\n            <br></br>\n            <t>Side2   : </t> \n            <input \n            type = \"number\" \n            name = \"side_2\"\n            side_2 ={this.state.side_2} \n            onChange={this.handleChange} /> \n          </label>\n\n          <br></br>\n\n          <label>\n            <br></br>\n            <t>Side3   : </t> \n            <input \n              type=\"number\" \n              name = \"side_3\"\n              side_3 ={this.state.side_3} \n              onChange={this.handleChange} /> \n          </label>\n\n          <br></br><br></br>\n\n          <button type = \"button\" onClick = {this.handleClick} className = \"App\"> Calculate </button>\n        </form>\n        <label>\n            <br></br>\n            <t>Result   : </t> \n            {this.state.result}\n        </label>\n\n      \n\n      </div>\n\n      \n      \n    );\n  }\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}